spring.profiles=DEV

spring.datasource.url=jdbc:mysql://localhost/vidracaria2020?createDatabaseIfNotExist=true&serverTimezone=UTC
spring.datasource.username=root
spring.datasource.password=titofsa2010

spring.jpa.generate-ddl=true
spring.jpa.hibernate.ddl-auto=update

spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5InnoDBDialect
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true

#tamanho da foto
#spring.serlet.multipart.max-file-size=700KB

#server.address=endereço ip
#server.port= porta para iniciar a aplicação

#Gerando as tabelas no banco de dados
#spring.jpa.properties.javax.persistence.schema-generation.scripts.action=create
#spring.jpa.properties.javax.persistence.schema-generation.scripts.create-target=src/main/resources/ddl.sql

#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL57Dialect
#spring.jpa.show-sql=true

#spring.jackson.deserialization.fail-on-unknown-properties=true
#spring.jackson.deserialization.fail-on-ignored-properties=true

#spring.mvc.throw-exception-if-no-handler-found=true

#spring.resources.add-mappings=false


# utilizado apenas com opaquetoken, para utilizar com jwt é necessario alterar o resourceserver
#spring.security.oauth2.resourceserver.opaquetoken.introspection-uri=http://localhost:8081/oauth/check_token
#se o authorization estiver com permitAll não precisa informar o id e o secret do cliente
#spring.security.oauth2.resourceserver.opaquetoken.client-id=vidracaria
#spring.security.oauth2.resourceserver.opaquetoken.client-secret=vinicius

